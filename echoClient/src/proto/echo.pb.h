// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/echo.proto

#ifndef PROTOBUF_proto_2fecho_2eproto__INCLUDED
#define PROTOBUF_proto_2fecho_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace echo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fecho_2eproto();
void protobuf_AssignDesc_proto_2fecho_2eproto();
void protobuf_ShutdownFile_proto_2fecho_2eproto();

class EchoReq;
class EchoRes;

enum MType {
  ECHO = 1
};
bool MType_IsValid(int value);
const MType MType_MIN = ECHO;
const MType MType_MAX = ECHO;
const int MType_ARRAYSIZE = MType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MType_descriptor();
inline const ::std::string& MType_Name(MType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MType_descriptor(), value);
}
inline bool MType_Parse(
    const ::std::string& name, MType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MType>(
    MType_descriptor(), name, value);
}
// ===================================================================

class EchoReq : public ::google::protobuf::Message {
 public:
  EchoReq();
  virtual ~EchoReq();

  EchoReq(const EchoReq& from);

  inline EchoReq& operator=(const EchoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoReq& default_instance();

  void Swap(EchoReq* other);

  // implements Message ----------------------------------------------

  EchoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoReq& from);
  void MergeFrom(const EchoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .echo.MType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::echo::MType type() const;
  inline void set_type(::echo::MType value);

  // required string req = 2;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 2;
  inline const ::std::string& req() const;
  inline void set_req(const ::std::string& value);
  inline void set_req(const char* value);
  inline void set_req(const char* value, size_t size);
  inline ::std::string* mutable_req();
  inline ::std::string* release_req();
  inline void set_allocated_req(::std::string* req);

  // @@protoc_insertion_point(class_scope:echo.EchoReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* req_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fecho_2eproto();
  friend void protobuf_AssignDesc_proto_2fecho_2eproto();
  friend void protobuf_ShutdownFile_proto_2fecho_2eproto();

  void InitAsDefaultInstance();
  static EchoReq* default_instance_;
};
// -------------------------------------------------------------------

class EchoRes : public ::google::protobuf::Message {
 public:
  EchoRes();
  virtual ~EchoRes();

  EchoRes(const EchoRes& from);

  inline EchoRes& operator=(const EchoRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRes& default_instance();

  void Swap(EchoRes* other);

  // implements Message ----------------------------------------------

  EchoRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRes& from);
  void MergeFrom(const EchoRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .echo.MType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::echo::MType type() const;
  inline void set_type(::echo::MType value);

  // required string res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline const ::std::string& res() const;
  inline void set_res(const ::std::string& value);
  inline void set_res(const char* value);
  inline void set_res(const char* value, size_t size);
  inline ::std::string* mutable_res();
  inline ::std::string* release_res();
  inline void set_allocated_res(::std::string* res);

  // @@protoc_insertion_point(class_scope:echo.EchoRes)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* res_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fecho_2eproto();
  friend void protobuf_AssignDesc_proto_2fecho_2eproto();
  friend void protobuf_ShutdownFile_proto_2fecho_2eproto();

  void InitAsDefaultInstance();
  static EchoRes* default_instance_;
};
// ===================================================================


// ===================================================================

// EchoReq

// required .echo.MType type = 1;
inline bool EchoReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::echo::MType EchoReq::type() const {
  // @@protoc_insertion_point(field_get:echo.EchoReq.type)
  return static_cast< ::echo::MType >(type_);
}
inline void EchoReq::set_type(::echo::MType value) {
  assert(::echo::MType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:echo.EchoReq.type)
}

// required string req = 2;
inline bool EchoReq::has_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoReq::set_has_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoReq::clear_has_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoReq::clear_req() {
  if (req_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_->clear();
  }
  clear_has_req();
}
inline const ::std::string& EchoReq::req() const {
  // @@protoc_insertion_point(field_get:echo.EchoReq.req)
  return *req_;
}
inline void EchoReq::set_req(const ::std::string& value) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_ = new ::std::string;
  }
  req_->assign(value);
  // @@protoc_insertion_point(field_set:echo.EchoReq.req)
}
inline void EchoReq::set_req(const char* value) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_ = new ::std::string;
  }
  req_->assign(value);
  // @@protoc_insertion_point(field_set_char:echo.EchoReq.req)
}
inline void EchoReq::set_req(const char* value, size_t size) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_ = new ::std::string;
  }
  req_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:echo.EchoReq.req)
}
inline ::std::string* EchoReq::mutable_req() {
  set_has_req();
  if (req_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:echo.EchoReq.req)
  return req_;
}
inline ::std::string* EchoReq::release_req() {
  clear_has_req();
  if (req_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = req_;
    req_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoReq::set_allocated_req(::std::string* req) {
  if (req_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_;
  }
  if (req) {
    set_has_req();
    req_ = req;
  } else {
    clear_has_req();
    req_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoReq.req)
}

// -------------------------------------------------------------------

// EchoRes

// required .echo.MType type = 1;
inline bool EchoRes::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRes::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRes::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRes::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::echo::MType EchoRes::type() const {
  // @@protoc_insertion_point(field_get:echo.EchoRes.type)
  return static_cast< ::echo::MType >(type_);
}
inline void EchoRes::set_type(::echo::MType value) {
  assert(::echo::MType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:echo.EchoRes.type)
}

// required string res = 2;
inline bool EchoRes::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoRes::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoRes::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoRes::clear_res() {
  if (res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    res_->clear();
  }
  clear_has_res();
}
inline const ::std::string& EchoRes::res() const {
  // @@protoc_insertion_point(field_get:echo.EchoRes.res)
  return *res_;
}
inline void EchoRes::set_res(const ::std::string& value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    res_ = new ::std::string;
  }
  res_->assign(value);
  // @@protoc_insertion_point(field_set:echo.EchoRes.res)
}
inline void EchoRes::set_res(const char* value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    res_ = new ::std::string;
  }
  res_->assign(value);
  // @@protoc_insertion_point(field_set_char:echo.EchoRes.res)
}
inline void EchoRes::set_res(const char* value, size_t size) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    res_ = new ::std::string;
  }
  res_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:echo.EchoRes.res)
}
inline ::std::string* EchoRes::mutable_res() {
  set_has_res();
  if (res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    res_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:echo.EchoRes.res)
  return res_;
}
inline ::std::string* EchoRes::release_res() {
  clear_has_res();
  if (res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = res_;
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoRes::set_allocated_res(::std::string* res) {
  if (res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete res_;
  }
  if (res) {
    set_has_res();
    res_ = res;
  } else {
    clear_has_res();
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRes.res)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::echo::MType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::echo::MType>() {
  return ::echo::MType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fecho_2eproto__INCLUDED
