// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc.proto

#ifndef PROTOBUF_proto_2frpc_2eproto__INCLUDED
#define PROTOBUF_proto_2frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace jsou {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2frpc_2eproto();
void protobuf_AssignDesc_proto_2frpc_2eproto();
void protobuf_ShutdownFile_proto_2frpc_2eproto();

class RpcMessage;

enum MType {
  REQUEST = 1,
  RESPONSE = 2,
  ERROR = 3
};
bool MType_IsValid(int value);
const MType MType_MIN = REQUEST;
const MType MType_MAX = ERROR;
const int MType_ARRAYSIZE = MType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MType_descriptor();
inline const ::std::string& MType_Name(MType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MType_descriptor(), value);
}
inline bool MType_Parse(
    const ::std::string& name, MType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MType>(
    MType_descriptor(), name, value);
}
enum ECode {
  INTERNAL = 1,
  WRONG_PROTO = 2,
  NO_SERVICE = 3,
  INVALID_REQUEST = 4
};
bool ECode_IsValid(int value);
const ECode ECode_MIN = INTERNAL;
const ECode ECode_MAX = INVALID_REQUEST;
const int ECode_ARRAYSIZE = ECode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECode_descriptor();
inline const ::std::string& ECode_Name(ECode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECode_descriptor(), value);
}
inline bool ECode_Parse(
    const ::std::string& name, ECode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECode>(
    ECode_descriptor(), name, value);
}
// ===================================================================

class RpcMessage : public ::google::protobuf::Message {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  void Swap(RpcMessage* other);

  // implements Message ----------------------------------------------

  RpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jsou.MType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::jsou::MType type() const;
  inline void set_type(::jsou::MType value);

  // required fixed64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string serviceName = 3;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 3;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  inline void set_allocated_servicename(::std::string* servicename);

  // optional bytes request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  inline void set_allocated_request(::std::string* request);

  // optional bytes response = 5;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 5;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // optional .jsou.ECode code = 6;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 6;
  inline ::jsou::ECode code() const;
  inline void set_code(::jsou::ECode value);

  // @@protoc_insertion_point(class_scope:jsou.RpcMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* servicename_;
  int type_;
  int code_;
  ::std::string* request_;
  ::std::string* response_;
  friend void  protobuf_AddDesc_proto_2frpc_2eproto();
  friend void protobuf_AssignDesc_proto_2frpc_2eproto();
  friend void protobuf_ShutdownFile_proto_2frpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMessage

// required .jsou.MType type = 1;
inline bool RpcMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::jsou::MType RpcMessage::type() const {
  // @@protoc_insertion_point(field_get:jsou.RpcMessage.type)
  return static_cast< ::jsou::MType >(type_);
}
inline void RpcMessage::set_type(::jsou::MType value) {
  assert(::jsou::MType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jsou.RpcMessage.type)
}

// required fixed64 id = 2;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:jsou.RpcMessage.id)
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jsou.RpcMessage.id)
}

// optional string serviceName = 3;
inline bool RpcMessage::has_servicename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::set_has_servicename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMessage::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMessage::clear_servicename() {
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_->clear();
  }
  clear_has_servicename();
}
inline const ::std::string& RpcMessage::servicename() const {
  // @@protoc_insertion_point(field_get:jsou.RpcMessage.serviceName)
  return *servicename_;
}
inline void RpcMessage::set_servicename(const ::std::string& value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
  // @@protoc_insertion_point(field_set:jsou.RpcMessage.serviceName)
}
inline void RpcMessage::set_servicename(const char* value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
  // @@protoc_insertion_point(field_set_char:jsou.RpcMessage.serviceName)
}
inline void RpcMessage::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jsou.RpcMessage.serviceName)
}
inline ::std::string* RpcMessage::mutable_servicename() {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:jsou.RpcMessage.serviceName)
  return servicename_;
}
inline ::std::string* RpcMessage::release_servicename() {
  clear_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicename_;
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMessage::set_allocated_servicename(::std::string* servicename) {
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicename_;
  }
  if (servicename) {
    set_has_servicename();
    servicename_ = servicename;
  } else {
    clear_has_servicename();
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:jsou.RpcMessage.serviceName)
}

// optional bytes request = 4;
inline bool RpcMessage::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMessage::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMessage::clear_request() {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:jsou.RpcMessage.request)
  return *request_;
}
inline void RpcMessage::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(value);
  // @@protoc_insertion_point(field_set:jsou.RpcMessage.request)
}
inline void RpcMessage::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(value);
  // @@protoc_insertion_point(field_set_char:jsou.RpcMessage.request)
}
inline void RpcMessage::set_request(const void* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jsou.RpcMessage.request)
}
inline ::std::string* RpcMessage::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:jsou.RpcMessage.request)
  return request_;
}
inline ::std::string* RpcMessage::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMessage::set_allocated_request(::std::string* request) {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (request) {
    set_has_request();
    request_ = request;
  } else {
    clear_has_request();
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:jsou.RpcMessage.request)
}

// optional bytes response = 5;
inline bool RpcMessage::has_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMessage::set_has_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMessage::clear_response() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:jsou.RpcMessage.response)
  return *response_;
}
inline void RpcMessage::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set:jsou.RpcMessage.response)
}
inline void RpcMessage::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set_char:jsou.RpcMessage.response)
}
inline void RpcMessage::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jsou.RpcMessage.response)
}
inline ::std::string* RpcMessage::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:jsou.RpcMessage.response)
  return response_;
}
inline ::std::string* RpcMessage::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMessage::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:jsou.RpcMessage.response)
}

// optional .jsou.ECode code = 6;
inline bool RpcMessage::has_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMessage::set_has_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMessage::clear_has_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMessage::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::jsou::ECode RpcMessage::code() const {
  // @@protoc_insertion_point(field_get:jsou.RpcMessage.code)
  return static_cast< ::jsou::ECode >(code_);
}
inline void RpcMessage::set_code(::jsou::ECode value) {
  assert(::jsou::ECode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:jsou.RpcMessage.code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jsou

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jsou::MType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jsou::MType>() {
  return ::jsou::MType_descriptor();
}
template <> struct is_proto_enum< ::jsou::ECode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jsou::ECode>() {
  return ::jsou::ECode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2frpc_2eproto__INCLUDED
